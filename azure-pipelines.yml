# Example MuleSoft API cataloging and governance pipelinr

variables:
  - name: CATALOG_DESCRIPTOR
    value: 'catalog.yaml'
  - name: ANYPOINT_ORG
    value: '67d9aaea-3ab0-4fb4-8f45-61f48c60c4f2'
  - name: ANYPOINT_ENV
    value: 'Sandbox'
  - name: ANYPOINT_HOST
    value: 'anypoint.mulesoft.com'
  - name: API_FILE
    value: "api.json"
  - name: VERSION
    value: '0'
  # Include encrypted varialbles
  - group: anypoint-variable-group
  # Get branch
  - name: BRANCH_NAME
    value: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]

trigger:
- develop

pool: 
  name: "default"

steps:
- bash: |
    if [ -e $(CATALOG_DESCRIPTOR) ]
    then      
      cat $(API_FILE)
      
      echo Environment
      env

      # Publish API      
      api-catalog publish-asset \
      --trigger-criteria=branch:$(BRANCH_NAME) \
      --organization $(ANYPOINT_ORG) \
      --host=$(ANYPOINT_HOST) \
      --environment=$(ANYPOINT_ENV) \
      --client_id=$(ANYPOINT_CLIENT_ID) \
      --client_secret=$(ANYPOINT_CLIENT_SECRET) > catalog-result.txt
      
      cat catalog-result.txt
      
      # Capture latest version
      while IFS= read -r line
      do
        echo $line
        read -a strarr <<< $line
        if [[ "$line" == "Version"* ]]
        then
          VERSION="${strarr[1]}"
        fi
      done < catalog-result.txt

      echo Latest version $VERSION
    else
      exit 1
    fi
  env:
    ANYPOINT_CLIENT_ID: $(ANYPOINT_CLIENT_ID)
    ANYPOINT_CLIENT_SECRET: $(ANYPOINT_CLIENT_SECRET)
    ANYPOINT_USERNAME: $(ANYPOINT_USERNAME)
    ANYPOINT_PASSWORD: $(ANYPOINT_PASSWORD)
  displayName: 'Catalog and validate'

- bash: |
    # Validate API
    
    echo Environment
    env
    
    # Create zip asset to validate
    echo " { “main”: “${API_FILE}”, “classifier”: “oas” }" > exchange.json
    
    cat exchange.json

    zip ./api.zip exchange.json api.json

    anypoint-cli governance api validate --rulesets  openapi-best-practices-ruleset.yaml ./api.zip \
    --organization $(ANYPOINT_ORG) \
    --host=$(ANYPOINT_HOST) \
    --environment=$(ANYPOINT_ENV) > output.txt
    
    cat output.txt
    
    # If output indicates error then stop
    if [[ ! $(grep "Spec conforms with Ruleset" output.txt) ]] ; then
        echo "Failed validation"
        exit 1
    else
        echo "Failed succeeded"
    fi
  env:
    ANYPOINT_USERNAME: $(ANYPOINT_USERNAME)
    ANYPOINT_PASSWORD: $(ANYPOINT_PASSWORD)
  displayName: 'Validate against ruleset'