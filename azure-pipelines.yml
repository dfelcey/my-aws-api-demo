# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  CATALOG_DESCRIPTOR: 'catalog.yaml'
  ANYPOINT_ORG: '67d9aaea-3ab0-4fb4-8f45-61f48c60c4f2'
  ANYPOINT_ENV: 'Sandbox'
  ANYPOINT_HOST: 'anypoint.mulesoft.com'
  AWS_API_ID: '0yfmyiql34'
  API_FILE: "api.json"
  TMP_DIR: 'xyz123'
  VERSION: '0'

trigger:
- master

pool: 
  name: "default"

steps:
- bash: |
    if [ -e $CATALOG_DESCRIPTOR ]
    then
      # Update catalog meta-data 
      mkdir -p $TMP_DIR
      
      if [ -d $TMP_DIR ]
      then 
        rm -rf $TMP_DIR
        mkdir $TMP_DIR
      fi 
      
      cat $API_FILE
      
      api-catalog update-descriptor 

      # Publish API      
      api-catalog publish-asset \
      --organization $ANYPOINT_ORG \
      --host=$ANYPOINT_HOST \
      --environment=$ANYPOINT_ENV \
      --client_id=$ANYPOINT_CLIENT_ID \
      --client_secret=$ANYPOINT_CLIENT_SECRET > catalog-result.txt
      
      cat catalog-result.txt
      
      # Capture latest version
      while IFS= read -r line
      do
        echo $line
        read -a strarr <<< $line
        if [[ "$line" == "Version"* ]]
        then
          VERSION="${strarr[1]}""
        fi
      done < catalog-result.txt

      echo Latest version $VERSION
      echo $VERSION > version.txt
    else
      exit 1
    fi
  displayName: 'Catalog and validate'

- bash: |
    # Save ruleset for later
    cp openapi-best-practices-ruleset.yaml $TMP_DIR
    
    VERSION=$(<version.txt)
    
    # Download new asset
    anypoint-cli exchange asset download package-tracker-api/$VERSION $TMP_DIR \
        --organization $ANYPOINT_ORG \
        --host=$ANYPOINT_HOST \
        --environment=$ANYPOINT_ENV
  displayName: 'Download asset from Exchange'

- bash: |
    # Validate API
    
    # Move and unzip file
    unzip -o $TMP_DIR/*.zip -d $TMP_DIR
    ls $TMP_DIR
    anypoint-cli governance api validate --rulesets  $TMP_DIR/openapi-best-practices-ruleset.yaml $TMP_DIR/*.zip \
    --organization $ANYPOINT_ORG \
    --host=$ANYPOINT_HOST \
    --environment=$ANYPOINT_ENV > output.txt
    
    cat output.txt
    
    # If output indicates error then stop
    if [[ ! $(grep "Spec conforms with Ruleset" output.txt) ]] ; then
        echo "Failed validation"
        exit 1
    else
        echo "Failed paswed"
    fi
  displayName: 'Validate against ruleset'

- bash: |
    echo Updating AWS API Gateway
  displayName: 'Update AWS API Gateway'
